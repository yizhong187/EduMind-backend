// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: messages.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createNewMessage = `-- name: CreateNewMessage :exec
INSERT INTO messages (message_id, chat_id, user_id, created_at, content)
VALUES ($1, $2, $3, $4, $5)
`

type CreateNewMessageParams struct {
	MessageID uuid.UUID
	ChatID    int32
	UserID    uuid.UUID
	CreatedAt time.Time
	Content   string
}

func (q *Queries) CreateNewMessage(ctx context.Context, arg CreateNewMessageParams) error {
	_, err := q.db.ExecContext(ctx, createNewMessage,
		arg.MessageID,
		arg.ChatID,
		arg.UserID,
		arg.CreatedAt,
		arg.Content,
	)
	return err
}

const deleteMessage = `-- name: DeleteMessage :exec
UPDATE messages SET deleted = TRUE WHERE message_id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, messageID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, messageID)
	return err
}

const editMessage = `-- name: EditMessage :exec
UPDATE messages SET content = $1, updated_at = $2 WHERE message_id = $3
`

type EditMessageParams struct {
	Content   string
	UpdatedAt time.Time
	MessageID uuid.UUID
}

func (q *Queries) EditMessage(ctx context.Context, arg EditMessageParams) error {
	_, err := q.db.ExecContext(ctx, editMessage, arg.Content, arg.UpdatedAt, arg.MessageID)
	return err
}

const getAllMessages = `-- name: GetAllMessages :many
SELECT message_id, chat_id, user_id, created_at, updated_at, deleted, content FROM messages WHERE chat_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetAllMessages(ctx context.Context, chatID int32) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getAllMessages, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.MessageID,
			&i.ChatID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Deleted,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
