// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getUserById = `-- name: GetUserById :one
SELECT user_id, username, email, user_type FROM users WHERE user_id = $1
`

func (q *Queries) GetUserById(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.UserType,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT user_id, username, email, user_type FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.UserType,
	)
	return i, err
}

const getUserTypeById = `-- name: GetUserTypeById :one
SELECT user_type FROM users WHERE user_id = $1
`

func (q *Queries) GetUserTypeById(ctx context.Context, userID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserTypeById, userID)
	var user_type string
	err := row.Scan(&user_type)
	return user_type, err
}

const getUserTypeByUsername = `-- name: GetUserTypeByUsername :one
SELECT user_type FROM users WHERE username = $1
`

func (q *Queries) GetUserTypeByUsername(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserTypeByUsername, username)
	var user_type string
	err := row.Scan(&user_type)
	return user_type, err
}

const insertNewUser = `-- name: InsertNewUser :exec
INSERT INTO users (user_id, username, email ,user_type) VALUES ($1, $2, $3, $4)
`

type InsertNewUserParams struct {
	UserID   uuid.UUID
	Username string
	Email    string
	UserType string
}

func (q *Queries) InsertNewUser(ctx context.Context, arg InsertNewUserParams) error {
	_, err := q.db.ExecContext(ctx, insertNewUser,
		arg.UserID,
		arg.Username,
		arg.Email,
		arg.UserType,
	)
	return err
}

const updateUserProfile = `-- name: UpdateUserProfile :exec
UPDATE users SET username = $1, email = $2 WHERE user_id = $3
`

type UpdateUserProfileParams struct {
	Username string
	Email    string
	UserID   uuid.UUID
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateUserProfile, arg.Username, arg.Email, arg.UserID)
	return err
}
