// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: students.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createNewStudent = `-- name: CreateNewStudent :one
INSERT INTO students (student_id, username, email, created_at, name, valid, hashed_password)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING student_id, username, email, created_at, name, valid, hashed_password
`

type CreateNewStudentParams struct {
	StudentID      uuid.UUID
	Username       string
	Email          string
	CreatedAt      time.Time
	Name           string
	Valid          bool
	HashedPassword string
}

func (q *Queries) CreateNewStudent(ctx context.Context, arg CreateNewStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createNewStudent,
		arg.StudentID,
		arg.Username,
		arg.Email,
		arg.CreatedAt,
		arg.Name,
		arg.Valid,
		arg.HashedPassword,
	)
	var i Student
	err := row.Scan(
		&i.StudentID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.Name,
		&i.Valid,
		&i.HashedPassword,
	)
	return i, err
}

const getStudentById = `-- name: GetStudentById :one
SELECT student_id, username, email, created_at, name, valid, hashed_password FROM students WHERE student_id = $1
`

func (q *Queries) GetStudentById(ctx context.Context, studentID uuid.UUID) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudentById, studentID)
	var i Student
	err := row.Scan(
		&i.StudentID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.Name,
		&i.Valid,
		&i.HashedPassword,
	)
	return i, err
}

const getStudentByUsername = `-- name: GetStudentByUsername :one
SELECT student_id, username, email, created_at, name, valid, hashed_password FROM students WHERE username = $1
`

func (q *Queries) GetStudentByUsername(ctx context.Context, username string) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudentByUsername, username)
	var i Student
	err := row.Scan(
		&i.StudentID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.Name,
		&i.Valid,
		&i.HashedPassword,
	)
	return i, err
}

const getStudentHash = `-- name: GetStudentHash :one
SELECT hashed_password FROM students WHERE username = $1
`

func (q *Queries) GetStudentHash(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, getStudentHash, username)
	var hashed_password string
	err := row.Scan(&hashed_password)
	return hashed_password, err
}

const studentCreateNewChat = `-- name: StudentCreateNewChat :one
INSERT INTO chats (student_id, created_at, subject_id, header, photo_url)
VALUES ($1, $2, $3, $4, $5)
RETURNING chat_id, student_id, tutor_id, created_at, subject_id, topic, header, photo_url, completed
`

type StudentCreateNewChatParams struct {
	StudentID uuid.UUID
	CreatedAt time.Time
	SubjectID int32
	Header    string
	PhotoUrl  sql.NullString
}

func (q *Queries) StudentCreateNewChat(ctx context.Context, arg StudentCreateNewChatParams) (Chat, error) {
	row := q.db.QueryRowContext(ctx, studentCreateNewChat,
		arg.StudentID,
		arg.CreatedAt,
		arg.SubjectID,
		arg.Header,
		arg.PhotoUrl,
	)
	var i Chat
	err := row.Scan(
		&i.ChatID,
		&i.StudentID,
		&i.TutorID,
		&i.CreatedAt,
		&i.SubjectID,
		&i.Topic,
		&i.Header,
		&i.PhotoUrl,
		&i.Completed,
	)
	return i, err
}

const studentGetAllChats = `-- name: StudentGetAllChats :many
SELECT chat_id, student_id, tutor_id, created_at, subject_id, topic, header, photo_url, completed FROM chats WHERE student_id = $1
ORDER BY created_at DESC
`

func (q *Queries) StudentGetAllChats(ctx context.Context, studentID uuid.UUID) ([]Chat, error) {
	rows, err := q.db.QueryContext(ctx, studentGetAllChats, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ChatID,
			&i.StudentID,
			&i.TutorID,
			&i.CreatedAt,
			&i.SubjectID,
			&i.Topic,
			&i.Header,
			&i.PhotoUrl,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudentPassword = `-- name: UpdateStudentPassword :exec
UPDATE students SET hashed_password = $1 WHERE student_id = $2
`

type UpdateStudentPasswordParams struct {
	HashedPassword string
	StudentID      uuid.UUID
}

func (q *Queries) UpdateStudentPassword(ctx context.Context, arg UpdateStudentPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateStudentPassword, arg.HashedPassword, arg.StudentID)
	return err
}

const updateStudentProfile = `-- name: UpdateStudentProfile :one
UPDATE students SET username = $1, name = $2, email = $3 WHERE student_id = $4
RETURNING student_id, username, email, created_at, name, valid, hashed_password
`

type UpdateStudentProfileParams struct {
	Username  string
	Name      string
	Email     string
	StudentID uuid.UUID
}

func (q *Queries) UpdateStudentProfile(ctx context.Context, arg UpdateStudentProfileParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, updateStudentProfile,
		arg.Username,
		arg.Name,
		arg.Email,
		arg.StudentID,
	)
	var i Student
	err := row.Scan(
		&i.StudentID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.Name,
		&i.Valid,
		&i.HashedPassword,
	)
	return i, err
}
