// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: chats.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addChatTopic = `-- name: AddChatTopic :exec
INSERT INTO chat_topics (chat_id, topic_id)
VALUES ($1, $2)
RETURNING chat_id, topic_id
`

type AddChatTopicParams struct {
	ChatID  int32
	TopicID int32
}

func (q *Queries) AddChatTopic(ctx context.Context, arg AddChatTopicParams) error {
	_, err := q.db.ExecContext(ctx, addChatTopic, arg.ChatID, arg.TopicID)
	return err
}

const checkChatTaken = `-- name: CheckChatTaken :one
SELECT 
    CASE 
        WHEN tutor_id IS NULL THEN 0 
        ELSE 1 
    END AS is_tutor_id_null
FROM chats
WHERE chat_id = $1
`

func (q *Queries) CheckChatTaken(ctx context.Context, chatID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, checkChatTaken, chatID)
	var is_tutor_id_null int32
	err := row.Scan(&is_tutor_id_null)
	return is_tutor_id_null, err
}

const completeChat = `-- name: CompleteChat :exec
UPDATE chats SET completed = TRUE WHERE chat_id = $1
`

func (q *Queries) CompleteChat(ctx context.Context, chatID int32) error {
	_, err := q.db.ExecContext(ctx, completeChat, chatID)
	return err
}

const getAllChats = `-- name: GetAllChats :many
SELECT chat_id, student_id, tutor_id, created_at, subject_id, topic, header, photo_url, completed FROM chats WHERE student_id = $1 OR tutor_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetAllChats(ctx context.Context, studentID uuid.UUID) ([]Chat, error) {
	rows, err := q.db.QueryContext(ctx, getAllChats, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ChatID,
			&i.StudentID,
			&i.TutorID,
			&i.CreatedAt,
			&i.SubjectID,
			&i.Topic,
			&i.Header,
			&i.PhotoUrl,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatById = `-- name: GetChatById :one
SELECT chat_id, student_id, tutor_id, created_at, subject_id, topic, header, photo_url, completed FROM chats WHERE chat_id = $1
`

func (q *Queries) GetChatById(ctx context.Context, chatID int32) (Chat, error) {
	row := q.db.QueryRowContext(ctx, getChatById, chatID)
	var i Chat
	err := row.Scan(
		&i.ChatID,
		&i.StudentID,
		&i.TutorID,
		&i.CreatedAt,
		&i.SubjectID,
		&i.Topic,
		&i.Header,
		&i.PhotoUrl,
		&i.Completed,
	)
	return i, err
}

const getChatTopics = `-- name: GetChatTopics :many
SELECT topic_id FROM chat_topics WHERE chat_id = $1
`

func (q *Queries) GetChatTopics(ctx context.Context, chatID int32) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getChatTopics, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var topic_id int32
		if err := rows.Scan(&topic_id); err != nil {
			return nil, err
		}
		items = append(items, topic_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChatHeader = `-- name: UpdateChatHeader :one
UPDATE chats SET header = $1 WHERE chat_id = $2
RETURNING chat_id, student_id, tutor_id, created_at, subject_id, topic, header, photo_url, completed
`

type UpdateChatHeaderParams struct {
	Header string
	ChatID int32
}

func (q *Queries) UpdateChatHeader(ctx context.Context, arg UpdateChatHeaderParams) (Chat, error) {
	row := q.db.QueryRowContext(ctx, updateChatHeader, arg.Header, arg.ChatID)
	var i Chat
	err := row.Scan(
		&i.ChatID,
		&i.StudentID,
		&i.TutorID,
		&i.CreatedAt,
		&i.SubjectID,
		&i.Topic,
		&i.Header,
		&i.PhotoUrl,
		&i.Completed,
	)
	return i, err
}
