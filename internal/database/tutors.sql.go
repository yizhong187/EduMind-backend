// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tutors.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createNewTutor = `-- name: CreateNewTutor :one
INSERT INTO tutors (tutor_id, username, created_at, name, valid, hashed_password, yoe, subject, verified, rating, rating_count)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING tutor_id, username, created_at, name, valid, hashed_password, yoe, subject, verified, rating, rating_count
`

type CreateNewTutorParams struct {
	TutorID        uuid.UUID
	Username       string
	CreatedAt      time.Time
	Name           string
	Valid          bool
	HashedPassword string
	Yoe            int32
	Subject        string
	Verified       bool
	Rating         sql.NullFloat64
	RatingCount    int32
}

func (q *Queries) CreateNewTutor(ctx context.Context, arg CreateNewTutorParams) (Tutor, error) {
	row := q.db.QueryRowContext(ctx, createNewTutor,
		arg.TutorID,
		arg.Username,
		arg.CreatedAt,
		arg.Name,
		arg.Valid,
		arg.HashedPassword,
		arg.Yoe,
		arg.Subject,
		arg.Verified,
		arg.Rating,
		arg.RatingCount,
	)
	var i Tutor
	err := row.Scan(
		&i.TutorID,
		&i.Username,
		&i.CreatedAt,
		&i.Name,
		&i.Valid,
		&i.HashedPassword,
		&i.Yoe,
		&i.Subject,
		&i.Verified,
		&i.Rating,
		&i.RatingCount,
	)
	return i, err
}

const getTutorById = `-- name: GetTutorById :one
SELECT tutor_id, username, created_at, name, valid, hashed_password, yoe, subject, verified, rating, rating_count FROM tutors WHERE tutor_id = $1
`

func (q *Queries) GetTutorById(ctx context.Context, tutorID uuid.UUID) (Tutor, error) {
	row := q.db.QueryRowContext(ctx, getTutorById, tutorID)
	var i Tutor
	err := row.Scan(
		&i.TutorID,
		&i.Username,
		&i.CreatedAt,
		&i.Name,
		&i.Valid,
		&i.HashedPassword,
		&i.Yoe,
		&i.Subject,
		&i.Verified,
		&i.Rating,
		&i.RatingCount,
	)
	return i, err
}

const getTutorByUsername = `-- name: GetTutorByUsername :one
SELECT tutor_id, username, created_at, name, valid, hashed_password, yoe, subject, verified, rating, rating_count FROM tutors WHERE username = $1
`

func (q *Queries) GetTutorByUsername(ctx context.Context, username string) (Tutor, error) {
	row := q.db.QueryRowContext(ctx, getTutorByUsername, username)
	var i Tutor
	err := row.Scan(
		&i.TutorID,
		&i.Username,
		&i.CreatedAt,
		&i.Name,
		&i.Valid,
		&i.HashedPassword,
		&i.Yoe,
		&i.Subject,
		&i.Verified,
		&i.Rating,
		&i.RatingCount,
	)
	return i, err
}

const getTutorHash = `-- name: GetTutorHash :one
SELECT hashed_password FROM tutors WHERE username = $1
`

func (q *Queries) GetTutorHash(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, getTutorHash, username)
	var hashed_password string
	err := row.Scan(&hashed_password)
	return hashed_password, err
}
