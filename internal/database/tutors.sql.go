// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tutors.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addTutorSubject = `-- name: AddTutorSubject :one
INSERT INTO tutor_subjects (tutor_id, subject_id, yoe)
VALUES ($1, $2, $3)
RETURNING tutor_id, subject_id, yoe
`

type AddTutorSubjectParams struct {
	TutorID   uuid.UUID
	SubjectID int32
	Yoe       int32
}

func (q *Queries) AddTutorSubject(ctx context.Context, arg AddTutorSubjectParams) (TutorSubject, error) {
	row := q.db.QueryRowContext(ctx, addTutorSubject, arg.TutorID, arg.SubjectID, arg.Yoe)
	var i TutorSubject
	err := row.Scan(&i.TutorID, &i.SubjectID, &i.Yoe)
	return i, err
}

const createNewTutor = `-- name: CreateNewTutor :one
INSERT INTO tutors (tutor_id, username, email, created_at, name, valid, hashed_password, verified, rating, rating_count, photo_url)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING tutor_id, username, email, created_at, name, valid, hashed_password, verified, rating, rating_count, photo_url
`

type CreateNewTutorParams struct {
	TutorID        uuid.UUID
	Username       string
	Email          string
	CreatedAt      time.Time
	Name           string
	Valid          bool
	HashedPassword string
	Verified       bool
	Rating         sql.NullFloat64
	RatingCount    int32
	PhotoUrl       sql.NullString
}

func (q *Queries) CreateNewTutor(ctx context.Context, arg CreateNewTutorParams) (Tutor, error) {
	row := q.db.QueryRowContext(ctx, createNewTutor,
		arg.TutorID,
		arg.Username,
		arg.Email,
		arg.CreatedAt,
		arg.Name,
		arg.Valid,
		arg.HashedPassword,
		arg.Verified,
		arg.Rating,
		arg.RatingCount,
		arg.PhotoUrl,
	)
	var i Tutor
	err := row.Scan(
		&i.TutorID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.Name,
		&i.Valid,
		&i.HashedPassword,
		&i.Verified,
		&i.Rating,
		&i.RatingCount,
		&i.PhotoUrl,
	)
	return i, err
}

const getTutorById = `-- name: GetTutorById :one
SELECT tutor_id, username, email, created_at, name, valid, hashed_password, verified, rating, rating_count, photo_url FROM tutors WHERE tutor_id = $1
`

func (q *Queries) GetTutorById(ctx context.Context, tutorID uuid.UUID) (Tutor, error) {
	row := q.db.QueryRowContext(ctx, getTutorById, tutorID)
	var i Tutor
	err := row.Scan(
		&i.TutorID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.Name,
		&i.Valid,
		&i.HashedPassword,
		&i.Verified,
		&i.Rating,
		&i.RatingCount,
		&i.PhotoUrl,
	)
	return i, err
}

const getTutorByUsername = `-- name: GetTutorByUsername :one
SELECT tutor_id, username, email, created_at, name, valid, hashed_password, verified, rating, rating_count, photo_url FROM tutors WHERE username = $1
`

func (q *Queries) GetTutorByUsername(ctx context.Context, username string) (Tutor, error) {
	row := q.db.QueryRowContext(ctx, getTutorByUsername, username)
	var i Tutor
	err := row.Scan(
		&i.TutorID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.Name,
		&i.Valid,
		&i.HashedPassword,
		&i.Verified,
		&i.Rating,
		&i.RatingCount,
		&i.PhotoUrl,
	)
	return i, err
}

const getTutorHash = `-- name: GetTutorHash :one
SELECT hashed_password FROM tutors WHERE username = $1
`

func (q *Queries) GetTutorHash(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, getTutorHash, username)
	var hashed_password string
	err := row.Scan(&hashed_password)
	return hashed_password, err
}

const getTutorSubjectIDs = `-- name: GetTutorSubjectIDs :many
SELECT subject_id FROM tutor_subjects WHERE tutor_id = $1
`

func (q *Queries) GetTutorSubjectIDs(ctx context.Context, tutorID uuid.UUID) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getTutorSubjectIDs, tutorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var subject_id int32
		if err := rows.Scan(&subject_id); err != nil {
			return nil, err
		}
		items = append(items, subject_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTutorSubjects = `-- name: GetTutorSubjects :many
SELECT subject_id, yoe FROM tutor_subjects WHERE tutor_id = $1
`

type GetTutorSubjectsRow struct {
	SubjectID int32
	Yoe       int32
}

func (q *Queries) GetTutorSubjects(ctx context.Context, tutorID uuid.UUID) ([]GetTutorSubjectsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTutorSubjects, tutorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTutorSubjectsRow
	for rows.Next() {
		var i GetTutorSubjectsRow
		if err := rows.Scan(&i.SubjectID, &i.Yoe); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tutorAcceptQuestion = `-- name: TutorAcceptQuestion :exec
UPDATE chats SET tutor_id = $1 WHERE chat_id = $2
`

type TutorAcceptQuestionParams struct {
	TutorID uuid.NullUUID
	ChatID  int32
}

func (q *Queries) TutorAcceptQuestion(ctx context.Context, arg TutorAcceptQuestionParams) error {
	_, err := q.db.ExecContext(ctx, tutorAcceptQuestion, arg.TutorID, arg.ChatID)
	return err
}

const tutorGetAllChats = `-- name: TutorGetAllChats :many
SELECT chat_id, student_id, tutor_id, created_at, subject_id, topic, header, photo_url, completed, rating FROM chats WHERE tutor_id = $1
ORDER BY created_at DESC
`

func (q *Queries) TutorGetAllChats(ctx context.Context, tutorID uuid.NullUUID) ([]Chat, error) {
	rows, err := q.db.QueryContext(ctx, tutorGetAllChats, tutorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ChatID,
			&i.StudentID,
			&i.TutorID,
			&i.CreatedAt,
			&i.SubjectID,
			&i.Topic,
			&i.Header,
			&i.PhotoUrl,
			&i.Completed,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tutorGetAvailableQuestions = `-- name: TutorGetAvailableQuestions :many
SELECT chat_id, student_id, tutor_id, created_at, subject_id, topic, header, photo_url, completed, rating FROM chats
WHERE tutor_id IS NULL AND subject_id = ANY(
    SELECT ts.subject_id
    FROM tutor_subjects ts
    WHERE ts.tutor_id = $1
)
`

func (q *Queries) TutorGetAvailableQuestions(ctx context.Context, tutorID uuid.UUID) ([]Chat, error) {
	rows, err := q.db.QueryContext(ctx, tutorGetAvailableQuestions, tutorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ChatID,
			&i.StudentID,
			&i.TutorID,
			&i.CreatedAt,
			&i.SubjectID,
			&i.Topic,
			&i.Header,
			&i.PhotoUrl,
			&i.Completed,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tutorUpdateChat = `-- name: TutorUpdateChat :one
UPDATE chats SET tutor_id = $1, topic = $2 WHERE chat_id = $3
RETURNING chat_id, student_id, tutor_id, created_at, subject_id, topic, header, photo_url, completed, rating
`

type TutorUpdateChatParams struct {
	TutorID uuid.NullUUID
	Topic   sql.NullString
	ChatID  int32
}

func (q *Queries) TutorUpdateChat(ctx context.Context, arg TutorUpdateChatParams) (Chat, error) {
	row := q.db.QueryRowContext(ctx, tutorUpdateChat, arg.TutorID, arg.Topic, arg.ChatID)
	var i Chat
	err := row.Scan(
		&i.ChatID,
		&i.StudentID,
		&i.TutorID,
		&i.CreatedAt,
		&i.SubjectID,
		&i.Topic,
		&i.Header,
		&i.PhotoUrl,
		&i.Completed,
		&i.Rating,
	)
	return i, err
}

const updateTutorPassword = `-- name: UpdateTutorPassword :exec
UPDATE tutors SET hashed_password = $1 WHERE tutor_id = $2
`

type UpdateTutorPasswordParams struct {
	HashedPassword string
	TutorID        uuid.UUID
}

func (q *Queries) UpdateTutorPassword(ctx context.Context, arg UpdateTutorPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateTutorPassword, arg.HashedPassword, arg.TutorID)
	return err
}

const updateTutorProfile = `-- name: UpdateTutorProfile :one
UPDATE tutors SET username = $1, name = $2, email = $3, photo_url = $4 WHERE tutor_id = $5
RETURNING tutor_id, username, email, created_at, name, valid, hashed_password, verified, rating, rating_count, photo_url
`

type UpdateTutorProfileParams struct {
	Username string
	Name     string
	Email    string
	PhotoUrl sql.NullString
	TutorID  uuid.UUID
}

func (q *Queries) UpdateTutorProfile(ctx context.Context, arg UpdateTutorProfileParams) (Tutor, error) {
	row := q.db.QueryRowContext(ctx, updateTutorProfile,
		arg.Username,
		arg.Name,
		arg.Email,
		arg.PhotoUrl,
		arg.TutorID,
	)
	var i Tutor
	err := row.Scan(
		&i.TutorID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.Name,
		&i.Valid,
		&i.HashedPassword,
		&i.Verified,
		&i.Rating,
		&i.RatingCount,
		&i.PhotoUrl,
	)
	return i, err
}

const updateTutorRatings = `-- name: UpdateTutorRatings :exec
UPDATE tutors
SET rating = $1, rating_count = $2
WHERE tutor_id = $3
`

type UpdateTutorRatingsParams struct {
	Rating      sql.NullFloat64
	RatingCount int32
	TutorID     uuid.UUID
}

func (q *Queries) UpdateTutorRatings(ctx context.Context, arg UpdateTutorRatingsParams) error {
	_, err := q.db.ExecContext(ctx, updateTutorRatings, arg.Rating, arg.RatingCount, arg.TutorID)
	return err
}
